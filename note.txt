const employees = [
  { id: 1, Emp_name: "John", designation: "QA" },
  { id: 2, Emp_name: "Doe", designation: "FSD" },
  { id: 3, Emp_name: "Adam", designation: "DevOps Engineer" },
  { id: 4, Emp_name: "Stark", designation: "UI/UX Designer" },
  { id: 5, Emp_name: "Michael", designation: "Solution Architect" },
];

//getcall or get method
export const getEmployeeDetail = (req, res) => {
  res.status(200).json({ data: employees });
};
//get by id
export const getEmployeeDetailId = (req, res) => {
  const empId = req.params.id; //4
  console.log(empId);

  const empDetail = employees.find((ele) => ele.id == empId); //4 ===4
  if (!empDetail) {
    return res.status(404).send("Employee Not Found");
  }
  res.status(200).json({ message: "Employee Details", data: empDetail });
};
//create employee or post method
export const createEmployee = (req, res) => {
  const { Emp_name, designation } = req.body;
  const newEmployee = {
    id: employees.length + 1,
    Emp_name: Emp_name,
    designation: designation,
  };
  employees.push(newEmployee);

  res
    .status(200)
    .json({ message: "Employee created successfully", data: newEmployee });
};
//edit employee or put method
export const editEmployee = (req, res) => {
  const empId = req.params.id;
  const { Emp_name, designation } = req.body;
  const index = employees.findIndex((ele) => ele.id == empId);
  if (index === -1) {
    return res.status(404).send("Employee detail not found");
  }
  employees[index].Emp_name = Emp_name;
  employees[index].designation = designation;
  res
    .status(200)
    .json({ message: "Employee Updated Successfully", data: employees[index] });
};
//delete employee or delete method
export const deleteEmployee = (req, res) => {
  const empId = req.params.id;
  const index = employees.findIndex((ele) => ele.id == empId);
  if (index === -1) {
    return res.status(404).send("Employee detail not found");
  }
  employees.splice(index, 1);
  res.status(200).json({ message: "Employee Deleted Successfully" });
};




Node Introduction :
     	Node.js is an open-source, cross-platform JavaScript runtime environment that allows developers to run JavaScript code outside of a web browser. 
       It is designed to be efficient and scalable, making it well-suited for building server-side and networked applications. 
       Node.js is built on the V8 JavaScript engine, the same engine that powers Google Chrome, and it uses a non-blocking, event-driven architecture that makes it ideal for handling asynchronous tasks and I/O operations.
 
Non-blocking I/O: (async operation)
    Node.js uses an event loop to handle I/O operations in a non-blocking manner. This allows it to efficiently handle many concurrent   connections without the need for multiple threads.
Event-driven:
   Events triggered by user actions or system events

In-Built Packages: 
These are packages that come with Node.js, and you can use them without installing anything.
Third-Party Packages: 
These are packages created by the Node.js community or other developers. You need to install them using npm.
Custom Packages: 
These are packages that you or your team may create for specific use cases.

Express:
is a popular and web application framework for Node.js. It is designed to simplify the process of building robust and scalable web applications and APIs by providing a set of essential features and tools.               
Express.js is known for its simplicity, flexibility, and performance, making it a preferred choice for many developers.
Main features:
路      Middleware - (authentication, authorization)
路      Routing
路      HTTP Utility Methods
路      Error Handling